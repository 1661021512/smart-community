{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { ActivatedRouteSnapshot, ActivationEnd, ActivatedRoute, Router } from '@angular/router';\nimport { RouterTestingModule as RouterTestingModule$1 } from '@angular/router/testing';\nimport { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n/**\n * 路由测试桩\n */\n\nclass ActivatedRouteStub {\n  /**\n   * 当有新路由参数时，弹出ActivationEnd事件，供在服务中通过Router获取全局路由信息\n   * 比如：实现回退功能时，需要对每个路由信息进行缓存\n   * @param router 路由\n   */\n  constructor(router) {\n    this.paramsSubject = new Subject();\n    this.paramMapSubject = new Subject();\n    this.queryParamsSubject = new Subject();\n    this.queryParamMapSubject = new Subject();\n    this.snapshot = {\n      paramMap: {\n        get: () => {\n          return 0;\n        }\n      }\n    };\n    this.router = router;\n    this.params = this.paramsSubject.asObservable();\n    this.paramMap = this.paramMapSubject.asObservable();\n    this.queryParams = this.queryParamsSubject.asObservable();\n    this.paramsSubject.pipe(tap(params => {\n      const activatedRouteSnapshot = new ActivatedRouteSnapshot();\n      activatedRouteSnapshot.params = params;\n      this.router.emitEvent(new ActivationEnd(activatedRouteSnapshot));\n    })).subscribe(); // 注册导航后的回调\n\n    this.router.registerNavigateCallbackFn(queryParams => {\n      this.queryParamsSubject.next(queryParams);\n    });\n  }\n\n}\n\nActivatedRouteStub.ɵfac = function ActivatedRouteStub_Factory(t) {\n  return new (t || ActivatedRouteStub)(i0.ɵɵinject(i1.Router));\n};\n\nActivatedRouteStub.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ActivatedRouteStub,\n  factory: ActivatedRouteStub.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActivatedRouteStub, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Router\n    }];\n  }, null);\n})();\n\nclass ParamMapImpl {\n  constructor(values) {\n    this.keys = [];\n    this.values = {};\n\n    for (const key in values) {\n      if (values[key] !== undefined) {\n        const value = values[key];\n        this.keys.push(key);\n        this.values[key] = value;\n      }\n    }\n  }\n\n  get(name) {\n    return this.values[name];\n  }\n\n  getAll(name) {\n    return this.values[name];\n  }\n\n  has(name) {\n    return this.keys.indexOf(name) >= 0;\n  }\n\n}\n\nclass RouterStub {\n  constructor() {\n    /**\n     * 事件源\n     */\n    this.eventsSubject = new Subject();\n    this.navigateCallbackFns = [];\n    this.events = this.eventsSubject.asObservable();\n  }\n  /**\n   * 增加该函数的目的仅为满足Ionic对route-link指令的处理\n   * @param commands 未知\n   * @param navigationExtras 未知\n   */\n\n\n  createUrlTree(commands, navigationExtras = {}) {\n    return {\n      root: null,\n      queryParams: null,\n      fragment: null,\n      queryParamMap: null,\n\n      toString() {\n        return '';\n      }\n\n    };\n  }\n  /**\n   * 弹出新事件\n   * @param event 事件\n   */\n\n\n  emitEvent(event) {\n    this.eventsSubject.next(event);\n  }\n\n  navigateByUrl(url, extras) {\n    console.log('接收到了跳转请求', url, extras);\n    return Promise.resolve(true);\n  }\n  /**\n   * 跳转\n   * @param commands 参数\n   * @param extras 扩展属性\n   */\n\n\n  navigate(commands, extras) {\n    this.navigateCallbackFns.forEach(callback => callback(extras.queryParams));\n    return Promise.resolve(true);\n  }\n  /**\n   * 增加该函数的目的仅为满足Ionic对route-link指令的处理\n   * @param url 未知\n   */\n\n\n  serializeUrl(url) {\n    return '';\n  }\n  /**\n   * 注册导航返回的回调\n   * @param fn 回调函数\n   */\n\n\n  registerNavigateCallbackFn(fn) {\n    this.navigateCallbackFns.push(fn);\n  }\n\n}\n\nRouterStub.ɵfac = function RouterStub_Factory(t) {\n  return new (t || RouterStub)();\n};\n\nRouterStub.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RouterStub,\n  factory: RouterStub.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterStub, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass RouterTestingModule {}\n\nRouterTestingModule.ɵfac = function RouterTestingModule_Factory(t) {\n  return new (t || RouterTestingModule)();\n};\n\nRouterTestingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RouterTestingModule,\n  imports: [RouterTestingModule$1],\n  exports: [RouterTestingModule$1]\n});\nRouterTestingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: ActivatedRoute,\n    useClass: ActivatedRouteStub\n  }, {\n    provide: Router,\n    useClass: RouterStub\n  }],\n  imports: [[RouterTestingModule$1], RouterTestingModule$1]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterTestingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RouterTestingModule$1],\n      providers: [{\n        provide: ActivatedRoute,\n        useClass: ActivatedRouteStub\n      }, {\n        provide: Router,\n        useClass: RouterStub\n      }],\n      exports: [RouterTestingModule$1]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of router-testing\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ActivatedRouteStub, ParamMapImpl, RouterStub, RouterTestingModule }; //# sourceMappingURL=yunzhi-ng-router-testing.js.map","map":{"version":3,"sources":["/home/liguowen/文档/angular/smart-community/web/node_modules/@yunzhi/ng-router-testing/fesm2015/yunzhi-ng-router-testing.js"],"names":["i0","Injectable","NgModule","i1","ActivatedRouteSnapshot","ActivationEnd","ActivatedRoute","Router","RouterTestingModule","RouterTestingModule$1","Subject","tap","ActivatedRouteStub","constructor","router","paramsSubject","paramMapSubject","queryParamsSubject","queryParamMapSubject","snapshot","paramMap","get","params","asObservable","queryParams","pipe","activatedRouteSnapshot","emitEvent","subscribe","registerNavigateCallbackFn","next","ɵfac","ɵprov","type","ParamMapImpl","values","keys","key","undefined","value","push","name","getAll","has","indexOf","RouterStub","eventsSubject","navigateCallbackFns","events","createUrlTree","commands","navigationExtras","root","fragment","queryParamMap","toString","event","navigateByUrl","url","extras","console","log","Promise","resolve","navigate","forEach","callback","serializeUrl","fn","ɵmod","ɵinj","provide","useClass","args","imports","providers","exports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,eAArC;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,sBAAT,EAAiCC,aAAjC,EAAgDC,cAAhD,EAAgEC,MAAhE,QAA8E,iBAA9E;AACA,SAASC,mBAAmB,IAAIC,qBAAhC,QAA6D,yBAA7D;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA;AACA;AACA;;AACA,MAAMC,kBAAN,CAAyB;AACrB;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,aAAL,GAAqB,IAAIL,OAAJ,EAArB;AACA,SAAKM,eAAL,GAAuB,IAAIN,OAAJ,EAAvB;AACA,SAAKO,kBAAL,GAA0B,IAAIP,OAAJ,EAA1B;AACA,SAAKQ,oBAAL,GAA4B,IAAIR,OAAJ,EAA5B;AACA,SAAKS,QAAL,GAAgB;AACZC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,GAAG,EAAE,MAAM;AACP,iBAAO,CAAP;AACH;AAHK;AADE,KAAhB;AAOA,SAAKP,MAAL,GAAcA,MAAd;AACA,SAAKQ,MAAL,GAAc,KAAKP,aAAL,CAAmBQ,YAAnB,EAAd;AACA,SAAKH,QAAL,GAAgB,KAAKJ,eAAL,CAAqBO,YAArB,EAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKP,kBAAL,CAAwBM,YAAxB,EAAnB;AACA,SAAKR,aAAL,CAAmBU,IAAnB,CAAwBd,GAAG,CAACW,MAAM,IAAI;AAClC,YAAMI,sBAAsB,GAAG,IAAItB,sBAAJ,EAA/B;AACAsB,MAAAA,sBAAsB,CAACJ,MAAvB,GAAgCA,MAAhC;AACA,WAAKR,MAAL,CAAYa,SAAZ,CAAsB,IAAItB,aAAJ,CAAkBqB,sBAAlB,CAAtB;AACH,KAJ0B,CAA3B,EAIIE,SAJJ,GAhBgB,CAqBhB;;AACA,SAAKd,MAAL,CAAYe,0BAAZ,CAAwCL,WAAD,IAAiB;AACpD,WAAKP,kBAAL,CAAwBa,IAAxB,CAA6BN,WAA7B;AACH,KAFD;AAGH;;AA/BoB;;AAiCzBZ,kBAAkB,CAACmB,IAAnB;AAAA,mBAA+GnB,kBAA/G,EAAqGZ,EAArG,UAAmJG,EAAE,CAACI,MAAtJ;AAAA;;AACAK,kBAAkB,CAACoB,KAAnB,kBADqGhC,EACrG;AAAA,SAAmHY,kBAAnH;AAAA,WAAmHA,kBAAnH;AAAA;;AACA;AAAA,qDAFqGZ,EAErG,mBAA2FY,kBAA3F,EAA2H,CAAC;AAChHqB,IAAAA,IAAI,EAAEhC;AAD0G,GAAD,CAA3H,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAEgC,MAAAA,IAAI,EAAE9B,EAAE,CAACI;AAAX,KAAD,CAAP;AAA+B,GAFzE;AAAA;;AAGA,MAAM2B,YAAN,CAAmB;AACfrB,EAAAA,WAAW,CAACsB,MAAD,EAAS;AAChB,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKD,MAAL,GAAc,EAAd;;AACA,SAAK,MAAME,GAAX,IAAkBF,MAAlB,EAA0B;AACtB,UAAIA,MAAM,CAACE,GAAD,CAAN,KAAgBC,SAApB,EAA+B;AAC3B,cAAMC,KAAK,GAAGJ,MAAM,CAACE,GAAD,CAApB;AACA,aAAKD,IAAL,CAAUI,IAAV,CAAeH,GAAf;AACA,aAAKF,MAAL,CAAYE,GAAZ,IAAmBE,KAAnB;AACH;AACJ;AACJ;;AACDlB,EAAAA,GAAG,CAACoB,IAAD,EAAO;AACN,WAAO,KAAKN,MAAL,CAAYM,IAAZ,CAAP;AACH;;AACDC,EAAAA,MAAM,CAACD,IAAD,EAAO;AACT,WAAO,KAAKN,MAAL,CAAYM,IAAZ,CAAP;AACH;;AACDE,EAAAA,GAAG,CAACF,IAAD,EAAO;AACN,WAAO,KAAKL,IAAL,CAAUQ,OAAV,CAAkBH,IAAlB,KAA2B,CAAlC;AACH;;AApBc;;AAuBnB,MAAMI,UAAN,CAAiB;AACbhC,EAAAA,WAAW,GAAG;AACV;AACR;AACA;AACQ,SAAKiC,aAAL,GAAqB,IAAIpC,OAAJ,EAArB;AACA,SAAKqC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,MAAL,GAAc,KAAKF,aAAL,CAAmBvB,YAAnB,EAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI0B,EAAAA,aAAa,CAACC,QAAD,EAAWC,gBAAgB,GAAG,EAA9B,EAAkC;AAC3C,WAAO;AACHC,MAAAA,IAAI,EAAE,IADH;AAEH5B,MAAAA,WAAW,EAAE,IAFV;AAGH6B,MAAAA,QAAQ,EAAE,IAHP;AAIHC,MAAAA,aAAa,EAAE,IAJZ;;AAKHC,MAAAA,QAAQ,GAAG;AACP,eAAO,EAAP;AACH;;AAPE,KAAP;AASH;AACD;AACJ;AACA;AACA;;;AACI5B,EAAAA,SAAS,CAAC6B,KAAD,EAAQ;AACb,SAAKV,aAAL,CAAmBhB,IAAnB,CAAwB0B,KAAxB;AACH;;AACDC,EAAAA,aAAa,CAACC,GAAD,EAAMC,MAAN,EAAc;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,GAAxB,EAA6BC,MAA7B;AACA,WAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,CAACd,QAAD,EAAWS,MAAX,EAAmB;AACvB,SAAKZ,mBAAL,CAAyBkB,OAAzB,CAAiCC,QAAQ,IAAIA,QAAQ,CAACP,MAAM,CAACnC,WAAR,CAArD;AACA,WAAOsC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACII,EAAAA,YAAY,CAACT,GAAD,EAAM;AACd,WAAO,EAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI7B,EAAAA,0BAA0B,CAACuC,EAAD,EAAK;AAC3B,SAAKrB,mBAAL,CAAyBP,IAAzB,CAA8B4B,EAA9B;AACH;;AA1DY;;AA4DjBvB,UAAU,CAACd,IAAX;AAAA,mBAAuGc,UAAvG;AAAA;;AACAA,UAAU,CAACb,KAAX,kBAzFqGhC,EAyFrG;AAAA,SAA2G6C,UAA3G;AAAA,WAA2GA,UAA3G;AAAA;;AACA;AAAA,qDA1FqG7C,EA0FrG,mBAA2F6C,UAA3F,EAAmH,CAAC;AACxGZ,IAAAA,IAAI,EAAEhC;AADkG,GAAD,CAAnH,EAE4B,YAAY;AAAE,WAAO,EAAP;AAAY,GAFtD;AAAA;;AAIA,MAAMO,mBAAN,CAA0B;;AAE1BA,mBAAmB,CAACuB,IAApB;AAAA,mBAAgHvB,mBAAhH;AAAA;;AACAA,mBAAmB,CAAC6D,IAApB,kBAjGqGrE,EAiGrG;AAAA,QAAiHQ,mBAAjH;AAAA,YAAgJC,qBAAhJ;AAAA,YAAkLA,qBAAlL;AAAA;AACAD,mBAAmB,CAAC8D,IAApB,kBAlGqGtE,EAkGrG;AAAA,aAAiJ,CACzI;AAAEuE,IAAAA,OAAO,EAAEjE,cAAX;AAA2BkE,IAAAA,QAAQ,EAAE5D;AAArC,GADyI,EAEzI;AAAE2D,IAAAA,OAAO,EAAEhE,MAAX;AAAmBiE,IAAAA,QAAQ,EAAE3B;AAA7B,GAFyI,CAAjJ;AAAA,YAGiB,CAACpC,qBAAD,CAHjB,EAG0CA,qBAH1C;AAAA;;AAIA;AAAA,qDAtGqGT,EAsGrG,mBAA2FQ,mBAA3F,EAA4H,CAAC;AACjHyB,IAAAA,IAAI,EAAE/B,QAD2G;AAEjHuE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,OAAO,EAAE,CAACjE,qBAAD,CADV;AAECkE,MAAAA,SAAS,EAAE,CACP;AAAEJ,QAAAA,OAAO,EAAEjE,cAAX;AAA2BkE,QAAAA,QAAQ,EAAE5D;AAArC,OADO,EAEP;AAAE2D,QAAAA,OAAO,EAAEhE,MAAX;AAAmBiE,QAAAA,QAAQ,EAAE3B;AAA7B,OAFO,CAFZ;AAMC+B,MAAAA,OAAO,EAAE,CAACnE,qBAAD;AANV,KAAD;AAF2G,GAAD,CAA5H;AAAA;AAYA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASG,kBAAT,EAA6BsB,YAA7B,EAA2CW,UAA3C,EAAuDrC,mBAAvD,G,CACA","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { ActivatedRouteSnapshot, ActivationEnd, ActivatedRoute, Router } from '@angular/router';\nimport { RouterTestingModule as RouterTestingModule$1 } from '@angular/router/testing';\nimport { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * 路由测试桩\n */\nclass ActivatedRouteStub {\n    /**\n     * 当有新路由参数时，弹出ActivationEnd事件，供在服务中通过Router获取全局路由信息\n     * 比如：实现回退功能时，需要对每个路由信息进行缓存\n     * @param router 路由\n     */\n    constructor(router) {\n        this.paramsSubject = new Subject();\n        this.paramMapSubject = new Subject();\n        this.queryParamsSubject = new Subject();\n        this.queryParamMapSubject = new Subject();\n        this.snapshot = {\n            paramMap: {\n                get: () => {\n                    return 0;\n                }\n            }\n        };\n        this.router = router;\n        this.params = this.paramsSubject.asObservable();\n        this.paramMap = this.paramMapSubject.asObservable();\n        this.queryParams = this.queryParamsSubject.asObservable();\n        this.paramsSubject.pipe(tap(params => {\n            const activatedRouteSnapshot = new ActivatedRouteSnapshot();\n            activatedRouteSnapshot.params = params;\n            this.router.emitEvent(new ActivationEnd(activatedRouteSnapshot));\n        })).subscribe();\n        // 注册导航后的回调\n        this.router.registerNavigateCallbackFn((queryParams) => {\n            this.queryParamsSubject.next(queryParams);\n        });\n    }\n}\nActivatedRouteStub.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: ActivatedRouteStub, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nActivatedRouteStub.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: ActivatedRouteStub });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: ActivatedRouteStub, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Router }]; } });\nclass ParamMapImpl {\n    constructor(values) {\n        this.keys = [];\n        this.values = {};\n        for (const key in values) {\n            if (values[key] !== undefined) {\n                const value = values[key];\n                this.keys.push(key);\n                this.values[key] = value;\n            }\n        }\n    }\n    get(name) {\n        return this.values[name];\n    }\n    getAll(name) {\n        return this.values[name];\n    }\n    has(name) {\n        return this.keys.indexOf(name) >= 0;\n    }\n}\n\nclass RouterStub {\n    constructor() {\n        /**\n         * 事件源\n         */\n        this.eventsSubject = new Subject();\n        this.navigateCallbackFns = [];\n        this.events = this.eventsSubject.asObservable();\n    }\n    /**\n     * 增加该函数的目的仅为满足Ionic对route-link指令的处理\n     * @param commands 未知\n     * @param navigationExtras 未知\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n        return {\n            root: null,\n            queryParams: null,\n            fragment: null,\n            queryParamMap: null,\n            toString() {\n                return '';\n            }\n        };\n    }\n    /**\n     * 弹出新事件\n     * @param event 事件\n     */\n    emitEvent(event) {\n        this.eventsSubject.next(event);\n    }\n    navigateByUrl(url, extras) {\n        console.log('接收到了跳转请求', url, extras);\n        return Promise.resolve(true);\n    }\n    /**\n     * 跳转\n     * @param commands 参数\n     * @param extras 扩展属性\n     */\n    navigate(commands, extras) {\n        this.navigateCallbackFns.forEach(callback => callback(extras.queryParams));\n        return Promise.resolve(true);\n    }\n    /**\n     * 增加该函数的目的仅为满足Ionic对route-link指令的处理\n     * @param url 未知\n     */\n    serializeUrl(url) {\n        return '';\n    }\n    /**\n     * 注册导航返回的回调\n     * @param fn 回调函数\n     */\n    registerNavigateCallbackFn(fn) {\n        this.navigateCallbackFns.push(fn);\n    }\n}\nRouterStub.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterStub, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRouterStub.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterStub });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterStub, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass RouterTestingModule {\n}\nRouterTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRouterTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterTestingModule, imports: [RouterTestingModule$1], exports: [RouterTestingModule$1] });\nRouterTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterTestingModule, providers: [\n        { provide: ActivatedRoute, useClass: ActivatedRouteStub },\n        { provide: Router, useClass: RouterStub },\n    ], imports: [[RouterTestingModule$1], RouterTestingModule$1] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: RouterTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RouterTestingModule$1],\n                    providers: [\n                        { provide: ActivatedRoute, useClass: ActivatedRouteStub },\n                        { provide: Router, useClass: RouterStub },\n                    ],\n                    exports: [RouterTestingModule$1]\n                }]\n        }] });\n\n/*\n * Public API Surface of router-testing\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActivatedRouteStub, ParamMapImpl, RouterStub, RouterTestingModule };\n//# sourceMappingURL=yunzhi-ng-router-testing.js.map\n"]},"metadata":{},"sourceType":"module"}